schema {
  query: Query
  mutation: Mutation
}

type Error {
  code: String
  message: String
}

type FriendshipRequestType {
  id: UUID!
  userId: UUID!
  friendId: UUID!
  accepted: Boolean!
  rejected: Boolean!
  sender: UserType
}

type GetAnnouncedTerminResponse {
  termins: [TerminType!]!
}

type GetDatesByDayOfWeekResponse {
  dates: [DateTime!]!
}

type GetNotificationsResponse {
  notifications: [NotificationType!]!
}

type GetPhoneBookUsersResponse {
  users: [PhoneBookUserType!]!
}

type GetTerminByIdResponse {
  termin: TerminType!
  attendence: TerminAttendenceType!
  isCurrentUserAdmin: Boolean!
}

type Mutation {
  createUser(input: CreateUserInput): TokenResponse
  login(input: LoginInput): TokenResponse
  deleteNotification(input: DeleteNotificationInput): Result @authorize
  setTerminAttendence(input: SetTerminAttendenceInput): SetTerminAttendenceResponse @authorize
  announceTermin(input: AnnounceTerminInput): TerminType @authorize
  sendTerminApplication(input: SendTerminApplicationInput): Result @authorize
  acceptTerminApplication(input: AcceptTerminApplicationInput): Result @authorize
  rejectTerminApplication(input: RejectTerminApplicationInput): Result @authorize
  createEvent(input: CreateEventInput): UUID! @authorize
  sendFriendshipRequest(input: SendFriendshipRequestInput): Result @authorize
  acceptFriendshipRequest(input: AcceptFriendshipRequestInput): Result @authorize
  rejectFriendshipRequest(input: RejectFriendshipRequestInput): Result @authorize
  removeFriendship(input: RemoveFriendshipInput): Result @authorize
}

type NotificationType {
  id: UUID!
  resourceId: UUID
  type: NotificationTypeEnum!
  completed: Boolean!
}

type PagedListOfUserType {
  page: Int!
  pageSize: Int!
  totalCount: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  items: [UserType!]!
}

type PendingFriendshipRequestType {
  friendshipRequestId: UUID!
  sentByMe: Boolean!
}

type PhoneBookUserType {
  pendingFriendshipRequest: PendingFriendshipRequestType
  hasPendingFriendshipRequest: Boolean!
  id: UUID!
  firstName: String
  lastName: String
  email: String
  phone: String
}

type PlayerType {
  userId: UUID!
  firstName: String
  lastName: String
  isAttending: Boolean
}

type Query {
  me: UserType @authorize
  phoneBookUsers(input: GetPhoneBookUsersInput): GetPhoneBookUsersResponse @authorize
  notifications(input: GetNotificationsInput): GetNotificationsResponse @authorize
  datesByDayOfWeek(input: GetDatesByDayOfWeekInput): GetDatesByDayOfWeekResponse
  termins(date: DateTime!): [TerminType] @authorize
  terminById(input: GetTerminByIdInput): GetTerminByIdResponse @authorize
  announcedTermins(input: GetAnnouncedTerminsInput): GetAnnouncedTerminResponse @authorize
  friends(input: GetFriendsInput): PagedListOfUserType @authorize
  pendingFriendshipRequests: [FriendshipRequestType] @authorize
}

type Result {
  isSuccess: Boolean!
  isFailure: Boolean!
  error: Error
}

type SetTerminAttendenceResponse {
  players: [PlayerType!]!
}

type TerminAttendenceType {
  isCurrentUserAttending: Boolean
  playersAttending: [PlayerType]
  playersNotAttending: [PlayerType]
  playersNotResponded: [PlayerType]
}

type TerminType {
  id: UUID!
  date: DateTime!
  startTime: DateTime!
  endTime: DateTime!
  eventName: String
  sportType: SportType!
  status: TerminStatus!
  address: String
  price: Decimal!
  numberOfPlayersExpected: Int!
  notes: String
}

type TokenResponse {
  token: String!
}

type UserType {
  id: UUID!
  firstName: String
  lastName: String
  email: String
  phone: String
}

input AcceptFriendshipRequestInput {
  friendshipRequestId: UUID!
}

input AcceptTerminApplicationInput {
  terminApplicationId: UUID!
}

input AnnounceTerminInput {
  terminId: UUID!
  publicAnnouncement: Boolean!
}

input CreateEventInput {
  memberIds: [UUID!]!
  name: String!
  sportType: SportType!
  address: String!
  price: Decimal!
  numberOfPlayers: Int!
  notes: String
  eventTime: [TimeInput!]!
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  email: String!
  phone: String!
  password: String!
}

input DeleteNotificationInput {
  notificationId: UUID!
}

input GetAnnouncedTerminsInput {
  date: DateTime!
}

input GetDatesByDayOfWeekInput {
  dayOfWeek: DayOfWeek!
  numberOfDates: Int!
}

input GetFriendsInput {
  search: String
  page: Int!
  firstPageSize: Int
  pageSize: Int!
}

input GetNotificationsInput {
  count: Int!
}

input GetPhoneBookUsersInput {
  phoneNumbers: [String!]!
}

input GetTerminByIdInput {
  terminId: UUID!
}

input LoginInput {
  email: String!
  password: String!
}

input RejectFriendshipRequestInput {
  friendshipRequestId: UUID!
}

input RejectTerminApplicationInput {
  terminApplicationId: UUID!
}

input RemoveFriendshipInput {
  friendId: UUID!
}

input SendFriendshipRequestInput {
  friendIds: [UUID!]!
}

input SendTerminApplicationInput {
  terminId: UUID!
}

input SetTerminAttendenceInput {
  terminId: UUID!
  attending: Boolean!
}

input TimeInput {
  dayOfWeek: DayOfWeek!
  startDate: DateTime!
  startTime: DateTime!
  endTime: DateTime!
  repeatWeekly: Boolean!
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
  VALIDATION
}

enum DayOfWeek {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum NotificationTypeEnum {
  FRIENDSHIP_REQUEST_RECEIVED
  TERMIN_APPLICATION_RECEIVED
}

enum SportType {
  FOOTBALL
  HANDBALL
  BASKETBALL
  TENNIS
}

enum TerminStatus {
  PENDING
  FINISHED
  CANCELED
}

directive @authorize("The name of the authorization policy that determines access to the annotated resource." policy: String "Roles that are allowed to access the annotated resource." roles: [String!] "Defines when when the authorize directive shall be applied.By default the authorize directives are applied during the validation phase." apply: ApplyPolicy! = BEFORE_RESOLVER) repeatable on OBJECT | FIELD_DEFINITION

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

"The built-in `Decimal` scalar type."
scalar Decimal

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")
