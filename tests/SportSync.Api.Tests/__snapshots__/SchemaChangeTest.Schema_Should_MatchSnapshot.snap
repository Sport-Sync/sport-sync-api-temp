schema {
  query: Query
  mutation: Mutation
}

type Error {
  code: String
  message: String
}

type FriendshipRequestType {
  id: UUID!
  userId: UUID!
  friendId: UUID!
  accepted: Boolean!
  rejected: Boolean!
  sender: UserType
}

type GetAnnouncedMatchResponse {
  matches: [MatchAnnouncementType!]!
}

type GetDatesByDayOfWeekResponse {
  dates: [DateTime!]!
}

type GetMatchByIdResponse {
  match: MatchType!
  attendance: MatchAttendanceType!
  isCurrentUserAdmin: Boolean!
}

type GetNotificationsResponse {
  notifications: [NotificationType!]!
}

type GetPhoneBookUsersResponse {
  users: [PhoneBookUserType!]!
}

type MatchAnnouncementType {
  id: UUID!
  matchId: UUID!
  date: DateTime!
  startTime: DateTime!
  endTime: DateTime!
  eventName: String
  sportType: SportType!
  address: String
  price: Decimal!
  playerLimit: Int!
  acceptedPlayersCount: Int!
  description: String
  typeOfAnnouncement: MatchAnnouncementTypeEnum!
  currentUserAlreadyApplied: Boolean!
  currentUserIsPlayer: Boolean!
}

type MatchAttendanceType {
  isCurrentUserAttending: Boolean
  playersAttending: [PlayerType]
  playersNotAttending: [PlayerType]
  playersNotResponded: [PlayerType]
}

type MatchType {
  id: UUID!
  date: DateTime!
  startTime: DateTime!
  endTime: DateTime!
  eventName: String
  sportType: SportType!
  status: MatchStatus!
  address: String
  price: Decimal!
  numberOfPlayersExpected: Int!
  notes: String
}

type Mutation {
  createUser(input: CreateUserInput): TokenResponse
  login(input: LoginInput): TokenResponse
  uploadUserProfileImage(input: UploadProfileImageInput): Result @authorize
  removeUserProfileImage: Result @authorize
  deleteNotification(input: NotificationInput): Result @authorize
  completeNotification(input: NotificationInput): Result @authorize
  setMatchAttendance(input: SetMatchAttendanceInput): SetMatchAttendanceResponse @authorize
  announceMatch(input: AnnounceMatchInput): MatchType @authorize
  sendAnnouncementToFriends(input: AnnounceMatchInput): MatchType @authorize
  sendMatchApplication(input: SendMatchApplicationInput): Result @authorize
  acceptMatchApplication(input: MatchApplicationInput): Result @authorize
  rejectMatchApplication(input: MatchApplicationInput): Result @authorize
  createEvent(input: CreateEventInput): UUID! @authorize
  sendEventInvitation(input: SendEventInvitationInput): Result @authorize
  acceptEventInvitation(input: EventInvitationInput): Result @authorize
  rejectEventInvitation(input: EventInvitationInput): Result @authorize
  sendFriendshipRequest(input: SendFriendshipRequestInput): Result @authorize
  acceptFriendshipRequest(input: FriendshipRequestInput): Result @authorize
  rejectFriendshipRequest(input: FriendshipRequestInput): Result @authorize
  cancelFriendshipRequest(input: FriendshipRequestInput): Result @authorize
  removeFriendship(input: RemoveFriendshipInput): Result @authorize
}

type NotificationType {
  notificationId: UUID!
  resourceId: UUID
  type: NotificationTypeEnum!
  content: String
  completed: Boolean!
}

type PagedListOfUserType {
  page: Int!
  pageSize: Int!
  totalCount: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  items: [UserType!]!
}

type PendingFriendshipRequestType {
  friendshipRequestId: UUID!
  sentByMe: Boolean!
}

type PhoneBookUserType {
  pendingFriendshipRequest: PendingFriendshipRequestType
  hasPendingFriendshipRequest: Boolean!
  id: UUID!
  firstName: String
  lastName: String
  email: String
  phone: String
}

type PlayerType {
  userId: UUID!
  firstName: String
  lastName: String
  imageUrl: String
  isAttending: Boolean
}

type ProfileImageUrlResponse {
  imageUrl: String
}

type Query {
  me: UserType @authorize
  phoneBookUsers(input: GetPhoneBookUsersInput): GetPhoneBookUsersResponse @authorize
  userProfileImageUrl(input: ProfileImageUrlInput): ProfileImageUrlResponse @authorize
  userProfile(input: GetUserProfileInput): UserProfileType @authorize
  users(input: GetUsersInput): PagedListOfUserType @authorize
  notifications(input: GetNotificationsInput): GetNotificationsResponse @authorize
  datesByDayOfWeek(input: GetDatesByDayOfWeekInput): GetDatesByDayOfWeekResponse
  matches(date: DateTime!): [MatchType] @authorize
  matchById(input: GetMatchByIdInput): GetMatchByIdResponse @authorize
  announcedMatches(input: GetAnnouncedMatchesInput): GetAnnouncedMatchResponse @authorize
  friends(input: GetFriendsInput): PagedListOfUserType @authorize
  pendingFriendshipRequests: [FriendshipRequestType] @authorize
}

type Result {
  isSuccess: Boolean!
  isFailure: Boolean!
  error: Error
}

type SetMatchAttendanceResponse {
  players: [PlayerType!]!
}

type TokenResponse {
  token: String!
}

type UserProfileType {
  mutualFriends: [UserType]
  pendingFriendshipRequest: PendingFriendshipRequestType
  hasPendingFriendshipRequest: Boolean!
  isFriendWithCurrentUser: Boolean!
  id: UUID!
  firstName: String
  lastName: String
  email: String
  phone: String
  imageUrl: String
}

type UserType {
  id: UUID!
  firstName: String
  lastName: String
  email: String
  phone: String
  imageUrl: String
}

input AnnounceMatchInput {
  matchId: UUID!
  publicAnnouncement: Boolean!
  playerLimit: Int!
  description: String
}

input CreateEventInput {
  memberIds: [UUID!]!
  name: String!
  sportType: SportType!
  address: String!
  price: Decimal!
  numberOfPlayers: Int!
  notes: String
  eventTime: [TimeInput!]!
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  email: String!
  phone: String!
  password: String!
}

input EventInvitationInput {
  eventInvitationId: UUID!
}

input FriendshipRequestInput {
  friendshipRequestId: UUID!
}

input GetAnnouncedMatchesInput {
  date: DateTime!
}

input GetDatesByDayOfWeekInput {
  dayOfWeek: DayOfWeek!
  numberOfDates: Int!
}

input GetFriendsInput {
  search: String
  page: Int!
  firstPageSize: Int
  pageSize: Int!
}

input GetMatchByIdInput {
  matchId: UUID!
}

input GetNotificationsInput {
  count: Int!
  language: String!
}

input GetPhoneBookUsersInput {
  phoneNumbers: [String!]!
}

input GetUserProfileInput {
  userId: UUID!
}

input GetUsersInput {
  search: String
  page: Int!
  firstPageSize: Int
  pageSize: Int!
}

input LoginInput {
  email: String!
  password: String!
}

input MatchApplicationInput {
  matchApplicationId: UUID!
}

input NotificationInput {
  notificationId: UUID!
}

input ProfileImageUrlInput {
  userId: UUID!
}

input RemoveFriendshipInput {
  friendId: UUID!
}

input SendEventInvitationInput {
  eventId: UUID!
  userId: UUID!
}

input SendFriendshipRequestInput {
  friendIds: [UUID!]!
}

input SendMatchApplicationInput {
  matchId: UUID!
}

input SetMatchAttendanceInput {
  matchId: UUID!
  attending: Boolean!
}

input TimeInput {
  dayOfWeek: DayOfWeek!
  startDate: DateTime!
  startTime: DateTime!
  endTime: DateTime!
  repeatWeekly: Boolean!
}

input UploadProfileImageInput {
  file: Upload!
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
  VALIDATION
}

enum DayOfWeek {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum MatchAnnouncementTypeEnum {
  FRIEND_LIST
  PUBLIC
}

enum MatchStatus {
  PENDING
  FINISHED
  CANCELED
}

enum NotificationTypeEnum {
  FRIENDSHIP_REQUEST_RECEIVED
  MATCH_APPLICATION_RECEIVED
  EVENT_INVITATION_RECEIVED
  EVENT_INVITATION_ACCEPTED
  EVENT_INVITATION_REJECTED
  MEMBER_JOINED_EVENT
  MATCH_ANNOUNCED_BY_FRIEND
  MATCH_APPLICATION_ACCEPTED
}

enum SportType {
  FOOTBALL
  HANDBALL
  BASKETBALL
  TENNIS
}

directive @authorize("The name of the authorization policy that determines access to the annotated resource." policy: String "Roles that are allowed to access the annotated resource." roles: [String!] "Defines when when the authorize directive shall be applied.By default the authorize directives are applied during the validation phase." apply: ApplyPolicy! = BEFORE_RESOLVER) repeatable on OBJECT | FIELD_DEFINITION

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

"The built-in `Decimal` scalar type."
scalar Decimal

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")

"The `Upload` scalar type represents a file upload."
scalar Upload
